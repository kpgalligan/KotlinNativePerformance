plugins {
    id 'kotlin-multiplatform' version '1.3.40'
//    id 'kotlin-multiplatform' version '1.3.40-eap-32'
//    id 'kotlin-multiplatform' version '1.3.31'
}
repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'co.touchlab.kotlinxcodesync'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'org.jetbrains.kotlin.mpp_app_android'
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {
//    android("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
//    macosX64("ios")
    iosX64("ios") {
        compilations.main {
            binaries {
                framework("arst") {
                    freeCompilerArgs.add("-Xobjc-generics")
                }

            }

//            extraOpts "-Xobjc-generics"
        }
        /*compilations.test {
            binaries {
                framework()
            }
        }*/
    }
    sourceSets {
        commonMain {
            dependencies {
//                implementation "co.touchlab:stately:0.7.1"
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                
                implementation kotlin('test-common')
        		implementation kotlin('test-annotations-common')
//                implementation "co.touchlab:stately:0.7.1"
            }
        }
        /*androidMain {
            dependencies {
                implementation kotlin('stdlib')
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }*/
        iosMain {
        }
        iosTest {
        }
    }
}

xcode {
    projectPath = "../iosApp/iosApp.xcodeproj"
    target = "iosApp"
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework("arst", 'DEBUG').linkTask

    doLast {
        def srcFile = kotlin.targets."$target".compilations.main.getBinary('FRAMEWORK', buildType)
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}